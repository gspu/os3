This is an L4Env-specific sources and build system for osFree OS/2
personality. To build it under L4Env, you should checkout L4Env sources
first:

# git clone https://github.com/osfree-project/l4env

To compile the L4Env sources under newer Linuxes, you'll need to run toolchain
from Debian 5 "Lenny". So, you'll need to install Debian 5 "Lenny" in chroot.
For that, use the addendum at the end of this README.

Apply patches to L4Env. For that, go to the "patches" subdirectory, and
run:

# make apply

To revert sources to unpatched state, run

# make revert

Then create the L4Env build dir:

# mkdir /home/src/l4/l4env/bld

Edit the build.cfg file in os3/platform/l4env dir. Change the path to top level dir, where 
"osfree", "os3", "l4", "kernel", LENNY and "bld" dirs are.

MAIN = /home/src/l4

-- This is where all sources are located.

ROOT = $(MAIN)/l4env

Then you need to adjust the paths to "os3", "l4", "bld", LENNY and "kernel/fiasco/build",
if required. Also, you can adjust the

DISPLAY = -display vnc=172.30.0.107:2

setting to point to your QEMU VNC display (if appropriate). I am working on my OS/2 machine,
and I am logging into my Linux machine via SSH, and run make via SSH. I connect to QEMU VNC
display via a VNC viewer. If you run QEMU without VNC, just uncomment the following line

DISPLAY = 

and comment the

DISPLAY = -display vnc=172.30.0.107:2

line out. Checkout the OS/2 personality to /home/src/l4/l4env/os3 dir:

# mkdir /home/src/l4/l4env/os3
# cd /home/src/l4/l4env/os3
# git clone https://github.com/osfree-project/os3 .

Go to the l4env platform-specific dir and do:

# cd /home/src/l4/l4env/os3/platform/l4env
# make config-l4

This will start an l4env config shell. You may leave everything as is, except for "Build 
Documentation" checkbox (if you don't want to fiddle with TeX).

Then do

# make l4

This should build everything, including DICE IDL compiler, L4env and L4/Fiasco.

Then do

# make config-fiasco

and set up the correct Fiasco options. You should enable "Handle and preserve segments",
"Enable I/O port protection" and "Enable CLI/STI (IOPL 3)" options under "Kernel options".
Then do

# make fiasco

to build L4/Fiasco with correct options. Then do

# make os3

to build OS/2 personality. And then you can test it by doing

# make run

Also, from now, you can change to the required directory in the os3/platform/l4env tree, 
and run make with path to the build directory specified as a parameter:

# cd ..
# cd os3
# cd platform/l4env
# cd server/os2srv
# make os3

This will build os2srv only.

Then you can test the built binaries in QEMU with the following command:

# make run

Connect to 172.30.0.107:2 VNC server with your VNC viewer, to see your QEMU screen (if you
enabled VNC).

This should start QEMU with GRUB, loading everything needed via PXE/TFTP using QEMU built-in
tftp server. There is a number of menu items available: 1) L4Env Hello world 2) os2fs server
test and the main one, 3) Interactive OS/2 personality setup, which can be used to run different
test binaries interactively.

The interactive scenario runs an interactive minishell, which is a standard OS/2 LX binary
which can start different OS/2 binaries as child processes. Note that at the moment, only 32-bit 
API's are supported. We're avoiding calling 16-bit API's such as VIO/KBD/MOU API's. Instead, we
use their 32-bit analogues from sub32.dll (exporting the same entry points like emxwrap.dll
exports in IBM's OS/2). osFree build system produces such binaries, which are linked to
emxwrap.dll, instead of viocalls.dll/moucalls.dll/kbdcalls.dll.

The simplest binary available is mini33.exe. It misses the C startup code, for simplicity. All it
does it writes the "I'm really small!" phrase. It tests the dynamic linking and calling the
simplest API, DosPutMessage from msg.dll, which is forwarded to DosPutMessage function in doscalls.dll. 
The latter is a wrapper around the DosWrite function, which writes a string to stdout. Stdout is
at the moment only implemented via the l4vfs subsystem, plus the term_con server from l4vfs, which
implements a VT100 terminal, accessed via uCLibC backend, allowing to write to a terminal via a
"stdout" file handle. VIO API's are not implemented yet, except for VioWrtTTY, which is implemented
as a DosWrite to stdout. Also, there are KbdStringIn and KbdCharIn API's, implemented via DosRead
from stdin. So, at the moment, reading/writing the console only possible via stdin/stdout/stderr
and l4vfs.

Also, you can start several other OS/2 LX binaries, built with OpenWatcom, like 
zip.exe/sort.exe/awk.exe/sed.exe/makeini.exe. Zip.exe is InfoZip zip. You can test it showing
the help screen, or a license, by specifying "-h" or "-L" switches. Note that you can also try archiving
some file. All it will do at the moment is just fail with an error message about "file not found".
Note also that at the moment, the write access to the file system is missing, so it can't really
archive anything.

Except for OpenWatcom binaries, now it's possible to run some VirtualPascal-built binaries. As
an example of those, you can run vp.exe, which is a VirtualPascal "Hello World". VirtualPascal
requires some more working API's, than OpenWactom, like some semaphore and shared memory API's.

Also, semi-working are Watcom assembler, wasm.exe, and OpenWatcom make, wmake.exe. You can try
starting wmake.exe without parameters, and it will complain that there is no makefile specified.
Also, there are some tests available, like argenv.exe, which is a test for passing the command
line parameters and environment variables. The command line parameters are those specified after
"argenv" command. The test just lists the available parameters and environment variables.
You can also list or add or delete the environment variables with built-in "set" or "env" minishell
commands. The initial environment is specified in config.sys variables. You can add or delete some
of the variables afterwards.

Except that, there is ver.exe, showing the OS/2 version via calling the DosQuerySysInfo API. You
can run it without parameters, or with the /r options, which shows the OS revision additionally.
Also, for getting the system messages, it uses the messages from oso001.msg file via the MSG API
(so, you need to add the oso001.msg file to menu.lst for this test to be working). So, it can be
used as a MSG API test as well.

Also, except that, there are some tests for shared memory and threading functions.

The files, available for running/using in the minicmd.exe minishell, are loaded into memory by
GRUB. They have a flat file system structure. You can list the root directory with the "dir"
command. Wildcards like "*" or "?" should work too.

Note also that the number of files available for loading are limited in GRUB (up to 99 modules)
and in "simple_file_server" (not more than 44 files). So, if you want to add all DLL's required
by "makeini.exe", for example, you'll need to comment some files out in menu.lst (located in the
"tools" dir), and uncomment (the same number of files) the required DLL's (you can look into
the binaries for import tables. The import table is seen in any text editor as a set of pascal-like
strings, visible as they are). The number of modules served by "simple_file_server" is specified
as an argument to the "roottask":

: task modname 'simple_file_server' attached 44 modules

You need to correct the exact number of modules, if changed. These modules follow the
"simple_file_server" in menu.lst.

Setting up the Debian 5 "Lenny" chroot.
--------------------------------------

Debian "Lenny" is available as a ready to use archive:

# cd /home/src/l4/l4env

Here is the directory where all "osfree", "os3", "l4", "kernel", "bld" subdirectories
are located.

# wget ftp://osfree.org/upload/debian5-i386-chrooted-bldenv.tgz
# tar xvzf debian5-i386-chrooted-bldenv.tgz
# cd debian-lenny-32
# sudo chown -R valerius.valerius .

This will unpack the archive and change the owner of files. Where valerius.valerius are
your usual user and group. Then create bindings for dirs in a chrooted filesystem to 
corresponding dirs in a root filesystem:

# mount -o bind /dev/ ./dev/
# mount -o bind /dev/shm/ ./dev/shm/
# mount -o bind /dev/pts/ ./dev/pts/
# mount -o bind /proc/ ./proc/
# mount -o bind /sys/ ./sys/
# mount -o bind /tmp/ ./tmp/
# mount -o bind /mnt/ ./mnt/
# mount -o bind /home/ ./home/

Then change into chroot via a command:

# chroot .

You can optionally start "mc" for your convenience:

# mc

You will see the chrooted environment as your root directory. Then you can change to your sources
directory:

# cd /home/src/l4/l4env/bld
# make

-- to build everything. Or

# cd os3
# cd platform/l4env
# cd src/server/os2srv
# make os3

then os2srv sources will be built. Or

# make run

will run your OS/2 personality binaries in QEMU.

Note that you could make a chrooted Debian "Lenny" environment yourself from scratch, via
the "debootstrap" script, like this:

# apt-get install debootstrap
# mkdir debian-lenny-32
# cd debian-lenny-32
# debootstrap --arch=i386 --no-check-gpg lenny . http://archive.debian.org/debian

This will download and install the minimal system into the debian-lenny-32 subdirectory. Then
you can chroot into it and install all required additional packages with APT. (add a line
like this:

deb http://archive.debian.org/debian lenny main

to your debian-lenny-32/etc/apt/sources.list file) to have your Debian Lenny repository configured.
